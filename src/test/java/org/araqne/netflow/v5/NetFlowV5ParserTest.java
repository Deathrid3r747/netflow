/*
 * Copyright 2013 Eediom Inc.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.araqne.netflow.v5;

import static org.junit.Assert.*;
import java.io.ByteArrayOutputStream;
import java.util.Map;

import org.araqne.netflow.v5.NetFlowV5Header;
import org.araqne.netflow.v5.NetFlowV5Packet;
import org.araqne.netflow.v5.NetFlowV5Parser;
import org.junit.Test;

public class NetFlowV5ParserTest {
	@Test
	public void testParse() {
		String hexPayload = "0005001e000395f251998b320000032500000312004700000e3fd30fc0a87c1400000000"
				+ "000000000000006e0004d725000316e9000318f00050bb7a001b06000000000000000000"
				+ "c0a87c14a47c650200000000000000000000000200000080000318b6000318b6dd250035"
				+ "000011000000000000000000a47c6502c0a87c1400000000000000000000000200000147"
				+ "000318bc000318bc0035dd25000011000000000000000000c0a87c14a47c650200000000"
				+ "000000000000000200000080000318b2000318b2e22a0035000011000000000000000000"
				+ "a47c6502c0a87c1400000000000000000000000200000147000318b6000318b60035e22a"
				+ "000011000000000000000000c0a87c14a47c650200000000000000000000000200000080"
				+ "000318ae000318ae83e20035000011000000000000000000a47c6502c0a87c1400000000"
				+ "000000000000000200000147000318b2000318b2003583e2000011000000000000000000"
				+ "c0a87c14a47c650200000000000000000000000200000080000318a9000318a98ec90035"
				+ "000011000000000000000000a47c6502c0a87c1400000000000000000000000200000147"
				+ "000318ad000318ad00358ec9000011000000000000000000c0a87c14a47c650200000000"
				+ "000000000000000200000080000318a1000318a1c7820035000011000000000000000000"
				+ "a47c6502c0a87c1400000000000000000000000200000147000318a9000318a90035c782"
				+ "000011000000000000000000c0a87c14a47c650200000000000000000000000200000080"
				+ "000316e0000316e0ba6d0035000011000000000000000000a47c6502c0a87c1400000000"
				+ "000000000000000200000147000316e4000316e40035ba6d000011000000000000000000"
				+ "c0a87c141717dd3d0000000000000000000000060000047700031a5d00031e01d69c0050"
				+ "001b060000000000000000001717dd3dc0a87c14000000000000000000000004000005d6"
				+ "00031b4a00031e010050d69c001b06000000000000000000c0a87c14a47c650200000000"
				+ "00000000000000020000008000031d0f00031d10e8600035000011000000000000000000"
				+ "a47c6502c0a87c14000000000000000000000002000000d400031d1400031d140035e860"
				+ "000011000000000000000000c0a87c144a7d808b00000000000000000000001300000ef2"
				+ "00031b8300031cbd836201bb0018060000000000000000004a7d808bc0a87c1400000000"
				+ "000000000000001200002f8100031bc200031cbd01bb8362001806000000000000000000"
				+ "c0a87c14a47c65020000000000000000000000020000007400031bdc00031bdcc7840035"
				+ "000011000000000000000000a47c6502c0a87c1400000000000000000000000200000189"
				+ "00031be100031be30035c784000011000000000000000000c0a87c14a47c650200000000"
				+ "00000000000000020000007400031bd600031bd6d2f10035000011000000000000000000"
				+ "a47c6502c0a87c140000000000000000000000020000018300031bdc00031bdc0035d2f1"
				+ "000011000000000000000000c0a87c14a47c650200000000000000000000000200000074"
				+ "00031bd100031bd1b8850035000011000000000000000000a47c6502c0a87c1400000000"
				+ "00000000000000020000026600031bd500031bd50035b885000011000000000000000000"
				+ "c0a87c14a47c65020000000000000000000000020000007400031bcd00031bcd9aec0035"
				+ "000011000000000000000000a47c6502c0a87c1400000000000000000000000200000270"
				+ "00031bd100031bd100359aec000011000000000000000000c0a87c14a47c650200000000"
				+ "00000000000000020000007400031b8400031b84b85d0035000011000000000000000000"
				+ "a47c6502c0a87c140000000000000000000000020000026600031b8800031bcd0035b85d"
				+ "000011000000000000000000c0a87c14a47c650200000000000000000000000200000088"
				+ "00031ac100031ac1d5e30035000011000000000000000000";

		byte[] b = toBinary(hexPayload);
		NetFlowV5Packet packet = NetFlowV5Parser.parsePacket(b);
		assertNotNull(packet);

		NetFlowV5Header h = packet.getHeader();
		assertEquals(5, h.getVersion());
		assertEquals(30, h.getCount());
		assertEquals(234994, h.getSysUptime());
		assertEquals(1369017138, h.getUnixSecs());
		assertEquals(805, h.getUnixNsecs());

		assertEquals(30, packet.getRecords().size());
		Map<String, Object> r = packet.getRecords().get(0).toMap();
		assertEquals("192.168.124.20", r.get("dst_addr"));
		assertEquals(6, r.get("protocol"));
		assertEquals(0, r.get("src_as"));
		assertEquals("14.63.211.15", r.get("src_addr"));
		assertEquals(202992L, r.get("last"));
		assertEquals(47994, r.get("dst_port"));
		assertEquals(317221L, r.get("octet_count"));
		assertEquals(80, r.get("src_port"));
		assertEquals(0, r.get("src_mask"));
		assertEquals(0, r.get("tos"));
		assertEquals(0, r.get("input"));
		assertEquals("0.0.0.0", r.get("next_hop"));
		assertEquals(27, r.get("tcp_flags"));
		assertEquals(0, r.get("dst_as"));
		assertEquals(0, r.get("output"));
		assertEquals(202473L, r.get("first"));
		assertEquals(0, r.get("dst_mask"));
		assertEquals(110L, r.get("packet_count"));
	}

	private byte[] toBinary(String hex) {
		ByteArrayOutputStream bos = new ByteArrayOutputStream();

		for (int i = 0; i < hex.length(); i += 2) {
			String s = hex.substring(i, i + 2);
			bos.write(Integer.parseInt(s, 16));
		}

		return bos.toByteArray();
	}
}
